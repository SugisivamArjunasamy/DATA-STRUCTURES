#include<stdio.h>
#include<stdlib.h>
struct stack{
    int *a;
    int top;
    int maxSize;
};
void initstack(struct stack *,int);
void push(struct stack *,int);
void display (struct stack *);
int pop (struct stack *);
int main(){
    int size,num,ch,popped;
    struct stack *p;
    p=(struct stack *)malloc(sizeof (struct stack));
    printf("Enter the maximum size of the stack\n");
    scanf("%d",&size);
    initstack(p,size);
    do{
        printf("Choice 1 : Push\nChoice 2 : Pop\nChoice 3 : Display\nAny other choice : Exit\nEnter your choice\n");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1:
                printf("Enter the element to be pushed\n");
                scanf("%d",&num);
                push(p,num);
                break;
            case 2:
                popped=pop(p);
                if (popped!=0)
                    printf("The popped element is %d",popped);
                printf("\n");
                break;
            case 3:
                printf("The contents of the stack are");
                display(p);
                printf("\n");
                break;
            default: 
                break;
        }
    }while(ch<=3);
    return 0;
}
void initstack(struct stack *p,int maxSize){
    p->top=-1;
    p->a=(int *)malloc(maxSize*sizeof(int));
    p->maxSize=maxSize;
}
void push(struct stack *p,int item){
    if(p->top==(p->maxSize)-1) {
        printf("Stack is full\n");
        return ;
    }
    
   (p->top)++;
   p->a[p->top]=item;
}
int pop(struct stack *p){
    int val;
    if(p->top<0){
        printf("Stack is empty");
        return 0;
    }
    val=p->a[p->top];
   (p->top)--;
   return val;
}
void display(struct stack *p){
    int topp=p->top;
  if(p->top<0){
      printf(" {}");
  }
  else{
      for(int i=0;i<=topp;i++)
          printf(" %d",p->a[i]);
      }
      
  }
